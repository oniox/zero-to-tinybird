DESCRIPTION >
	Provides *daily* statistics and gets data from the `daily_stats_mv` Data Source. This Materialized View is populated with the `feed_daily_mv_with_state` Pipe. 

In the first Node, we are using the `-State` function for the stats we are generating (average, min, max). For fun, we are also generating the standard deviation for the data retrieved.

The second node adds support for a dynamic `sym` query parameter for selecting a `stock_symbol` of interest. 

Fwiw, these two nodes could be combined into one.


NODE merge_from_mv
SQL >

    SELECT timestamp, symbol, 
    avgMerge(price_avg) AS price_avg,
    minMerge(price_min) AS price_min,
    maxMerge(price_max) AS price_max,
    stddevPopMerge(price_stddev) AS price_stddev
    FROM daily_stats_mv
    GROUP BY timestamp, symbol
    ORDER BY symbol ASC, timestamp ASC



NODE filter_by_symbol
DESCRIPTION >
    Adding support for an optional `sym` query parameter for selecting the symbol of interest.

    This Node returns results in **reverse chronological order**.

SQL >

    %
    SELECT * 
    FROM merge_from_mv
    WHERE 1=1
    {% if defined(sym) %}               
        AND symbol == {{ String(sym,description='description',required=False)}}
    {% end %}    
    ORDER BY timestamp DESC



