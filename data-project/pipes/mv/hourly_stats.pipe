TOKEN "untitled_pipe_0677_endpoint_read_5653" READ

NODE merge_from_mv
SQL >

    SELECT timestamp, symbol, 
    ROUND(avgMerge(price_avg),2) AS price_avg,
    minMerge(price_min) as price_min,
    maxMerge(price_max) as price_max,
    ROUND(stddevPopMerge(price_stddev),2) AS price_stddev
    FROM hourly_stats_mv
    GROUP BY timestamp, symbol 
    ORDER BY symbol ASC, timestamp DESC



NODE filter_by_symbol
SQL >

    %
    SELECT * 
    FROM merge_from_mv
    WHERE 1=1
    {% if defined(company) %}               
        AND symbol == {{ String(company,description='description',required=False)}}
    {% end %}    
    ORDER BY timestamp DESC



NODE filter_by_timestamp
DESCRIPTION >
    For testing:
    {% set start_time = '2024-01-20 00:00:00' %}
    {% set end_time = '2024-01-22 00:00:00' %}

SQL >

    %
    SELECT * 
    FROM filter_by_symbol
    WHERE 1=1 
    {% if defined(start_time) and defined(end_time) %}
          AND toDateTime(timestamp) BETWEEN parseDateTimeBestEffort({{ DateTime(start_time, description="'YYYY-MM-DD HH:mm:ss'. UTC. Optional and defaults to 7 days ago. Defines the start of the period of interest. ") }}) AND parseDateTimeBestEffort({{ DateTime(end_time, description="'YYYY-MM-DD HH:mm:ss'. UTC. Optional and defaults to time of request. Defines the end of the period of interest.") }})
       {% end %}
     {% if not defined(start_time) and not defined(end_time) %}
        AND toDateTime(timestamp) BETWEEN addDays(now(),-7) AND NOW()
     {% end %}
     {% if defined(start_time) and not defined(end_time) %}
         AND toDateTime(timestamp) BETWEEN parseDateTimeBestEffort({{ DateTime(start_time) }}) AND now()
     {% end %}
     {% if not defined(start_time) and defined(end_time) %}
         AND toDateTime(timestamp) BETWEEN addDays(toDateTime(parseDateTimeBestEffort({{DateTime(end_time)}})),-7) AND parseDateTimeBestEffort({{ DateTime(end_time) }})
     {% end %}


